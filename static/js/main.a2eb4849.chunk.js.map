{"version":3,"sources":["App.js","index.js"],"names":["App","useState","costprice","updateCostPrice","quantity","updatequantity","sellimgPrice","updatesellingPrice","msg","updateMsg","className","type","onChange","event","cP","target","value","quant","sP","onClick","profit","result","profitPercentage","roundedPper","Math","round","profitlResult","loss","lossPercentage","roundedPer","lossResult","rootElement","document","getElementById","ReactDOM","render"],"mappings":"gLAGe,SAASA,IACtB,IAAI,EAA+BC,mBAAS,IAA5C,mBAAKC,EAAL,KAAgBC,EAAhB,KAEI,EAA6BF,mBAAS,IAA1C,mBAAKG,EAAL,KAAeC,EAAf,KAEI,EAAqCJ,mBAAS,IAAlD,mBAAKK,EAAL,KAAmBC,EAAnB,KAEI,EAAmBN,mBAAS,IAAhC,mBAAKO,EAAL,KAAUC,EAAV,KAiDA,OACE,qBAAKC,UAAU,MAAf,SACE,gCACE,8CACA,oDACA,uBAAOC,KAAK,OAAOC,SAzCzB,SAA2BC,GACzB,IAAIC,EAAKD,EAAME,OAAOC,MACtBb,EAAgBW,MAwCZ,6CACA,uBAAOH,KAAK,OAAOC,SAjDzB,SAAsBC,GACpB,IAAII,EAAQJ,EAAME,OAAOC,MAEzBX,EAAeY,MA+CX,wDACA,uBAAON,KAAK,OAAOC,SAxDzB,SAA0BC,GACxB,IAAIK,EAAKL,EAAME,OAAOC,MAEtBT,EAAmBW,MAuDf,wBAAQC,QA1Cd,WACE,GAAqB,KAAjBb,GAAqC,KAAdJ,GAAiC,KAAbE,EAC7C,GAAIE,EAAeJ,EAAW,CAC5B,IAAIkB,EAASd,EAAeJ,EAExBmB,EAASD,EAAShB,EAElBkB,EAAoBF,EAASlB,EAAa,IAE1CqB,EAAcC,KAAKC,MAAMH,EAAkB,GAE3CI,EAAa,wBAAoBL,EAApB,8BAAgDE,GACjEd,EAAUiB,OACL,CACL,IAAIC,EAAOzB,EAAYI,EACnBsB,EAAkBD,EAAOzB,EAAa,IAEtC2B,EAAaL,KAAKC,MAAMG,EAAgB,GAGxCE,EAAU,uBADdT,EAASM,EAAOvB,EACF,8BAA+CyB,GAE7DpB,EAAUqB,QAKZrB,EAAU,8BAeR,+BACA,6BAAKD,SClEb,IAAMuB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACnC,EAAD,MAEF+B,I","file":"static/js/main.a2eb4849.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  var [costprice, updateCostPrice] = useState(\"\");\n\n  var [quantity, updatequantity] = useState(\"\");\n\n  var [sellimgPrice, updatesellingPrice] = useState(\"\");\n\n  var [msg, updateMsg] = useState(\"\");\n\n  function takeCurrentPrice(event) {\n    var sP = event.target.value;\n\n    updatesellingPrice(sP);\n  }\n  function takeQuantity(event) {\n    var quant = event.target.value;\n\n    updatequantity(quant);\n  }\n\n  function takePurchasePricw(event) {\n    var cP = event.target.value;\n    updateCostPrice(cP);\n  }\n\n  function calculatePrice() {\n    if (sellimgPrice !== \"\" || costprice !== \"\" || quantity !== \"\") {\n      if (sellimgPrice > costprice) {\n        var profit = sellimgPrice - costprice;\n\n        var result = profit * quantity;\n        //console.log(result);\n        var profitPercentage = (profit / costprice) * 100;\n\n        var roundedPper = Math.round(profitPercentage, 3);\n        // console.log(profitPercentage);\n        var profitlResult = `yayy you gain ${result} and percentage is ${roundedPper}`;\n        updateMsg(profitlResult);\n      } else {\n        var loss = costprice - sellimgPrice;\n        var lossPercentage = (loss / costprice) * 100;\n\n        var roundedPer = Math.round(lossPercentage, 3);\n\n        result = loss * quantity;\n        var lossResult = `ohh you lost ${result} and percentage is ${roundedPer}`;\n\n        updateMsg(lossResult);\n\n        //console.log(lossPercentage);\n      }\n    } else {\n      updateMsg(\"please give valid details\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>Stock Market</h1>\n        <label>Purchased Price</label>\n        <input type=\"text\" onChange={takePurchasePricw} />\n        <label>Quantity</label>\n        <input type=\"text\" onChange={takeQuantity} />\n        <label>Enter Current price</label>\n        <input type=\"text\" onChange={takeCurrentPrice} />\n\n        <button onClick={calculatePrice}>Check your Status</button>\n        <h2>{msg}</h2>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}